// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Notizap.Api.Migrations
{
    [DbContext(typeof(NotizapDbContext))]
    [Migration("20250711132019_EtiquetaCambio")]
    partial class EtiquetaCambio
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AdCampaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdReportId")
                        .HasColumnType("integer");

                    b.Property<string>("CampaignId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Clicks")
                        .HasColumnType("integer");

                    b.Property<decimal>("Ctr")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FollowersCount")
                        .HasColumnType("integer");

                    b.Property<int>("Impressions")
                        .HasColumnType("integer");

                    b.Property<decimal>("MontoInvertido")
                        .HasColumnType("numeric");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Objetivo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Reach")
                        .HasColumnType("integer");

                    b.Property<string>("Resultados")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ValorResultado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdReportId");

                    b.ToTable("AdCampaigns");
                });

            modelBuilder.Entity("AdReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<string>("Plataforma")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UnidadNegocio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AdReports");
                });

            modelBuilder.Entity("AnuncioDisplayML", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Clics")
                        .HasColumnType("integer");

                    b.Property<decimal>("Ctr")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("Impresiones")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("ReportePublicidadMLId")
                        .HasColumnType("integer");

                    b.Property<int>("Visitas")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReportePublicidadMLId");

                    b.ToTable("AnunciosDisplayML", (string)null);
                });

            modelBuilder.Entity("Cambio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CambioRegistradoSistema")
                        .HasColumnType("boolean");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("DiferenciaAFavor")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("DiferenciaAbonada")
                        .HasColumnType("numeric");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Envio")
                        .HasColumnType("text");

                    b.Property<string>("Etiqueta")
                        .HasColumnType("text");

                    b.Property<bool>("EtiquetaDespachada")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LlegoAlDeposito")
                        .HasColumnType("boolean");

                    b.Property<string>("ModeloCambio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModeloOriginal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<bool>("ParPedido")
                        .HasColumnType("boolean");

                    b.Property<string>("Pedido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("YaEnviado")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Cambios");
                });

            modelBuilder.Entity("CampaignMailchimp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CampaignId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ClickRate")
                        .HasColumnType("numeric");

                    b.Property<int>("Conversions")
                        .HasColumnType("integer");

                    b.Property<string>("Cuenta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EmailsSent")
                        .HasColumnType("integer");

                    b.Property<decimal>("OpenRate")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CampaignMailchimps");
                });

            modelBuilder.Entity("Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Canales")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("CantidadCompras")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaPrimeraCompra")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaUltimaCompra")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MontoTotalGastado")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Sucursales")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Telefono")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clientes", (string)null);
                });

            modelBuilder.Entity("ComisionOnline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Año")
                        .HasColumnType("integer")
                        .HasComment("Año del período");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Fecha de última actualización");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Fecha de creación del registro");

                    b.Property<int>("Mes")
                        .HasColumnType("integer")
                        .HasComment("Mes del período (1-12)");

                    b.Property<decimal>("MontoAndreani")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Monto pagado a Andreani");

                    b.Property<decimal>("MontoCaddy")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Monto pagado a Caddy");

                    b.Property<decimal>("MontoOCA")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Monto pagado a OCA");

                    b.Property<decimal>("TotalSinNC")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Total facturado sin notas de crédito");

                    b.HasKey("Id");

                    b.HasIndex("Año")
                        .HasDatabaseName("IX_ComisionesOnline_Año");

                    b.HasIndex("FechaCreacion")
                        .HasDatabaseName("IX_ComisionesOnline_FechaCreacion");

                    b.HasIndex("Mes", "Año")
                        .IsUnique()
                        .HasDatabaseName("IX_ComisionesOnline_Periodo");

                    b.ToTable("ComisionesOnline", (string)null);
                });

            modelBuilder.Entity("Compra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Canal")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Sucursal")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Compras", (string)null);
                });

            modelBuilder.Entity("CompraDetalle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer");

                    b.Property<string>("Categoria")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<int>("CompraId")
                        .HasColumnType("integer");

                    b.Property<string>("Marca")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<string>("Producto")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompraId");

                    b.ToTable("CompraDetalles", (string)null);
                });

            modelBuilder.Entity("Devolucion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("DineroDevuelto")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LlegoAlDeposito")
                        .HasColumnType("boolean");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Monto")
                        .HasColumnType("numeric");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("NotaCreditoEmitida")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("PagoEnvio")
                        .HasColumnType("numeric");

                    b.Property<string>("Pedido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Responsable")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Devoluciones");
                });

            modelBuilder.Entity("DevolucionMercadoLibre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cliente")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("NotaCreditoEmitida")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Pedido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Cliente")
                        .HasDatabaseName("IX_DevolucionesMercadoLibre_Cliente");

                    b.HasIndex("Fecha")
                        .HasDatabaseName("IX_DevolucionesMercadoLibre_Fecha");

                    b.HasIndex("Modelo")
                        .HasDatabaseName("IX_DevolucionesMercadoLibre_Modelo");

                    b.HasIndex("NotaCreditoEmitida")
                        .HasDatabaseName("IX_DevolucionesMercadoLibre_NotaCredito");

                    b.HasIndex("Pedido")
                        .HasDatabaseName("IX_DevolucionesMercadoLibre_Pedido");

                    b.HasIndex("Fecha", "NotaCreditoEmitida")
                        .HasDatabaseName("IX_DevolucionesMercadoLibre_FechaNotaCredito");

                    b.ToTable("DevolucionesMercadoLibre", (string)null);
                });

            modelBuilder.Entity("EnvioDiario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Andreani")
                        .HasColumnType("integer");

                    b.Property<int>("Caddy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MercadoLibre")
                        .HasColumnType("integer");

                    b.Property<int>("Oca")
                        .HasColumnType("integer");

                    b.Property<int>("RetirosSucursal")
                        .HasColumnType("integer");

                    b.Property<int>("Roberto")
                        .HasColumnType("integer");

                    b.Property<int>("Tino")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("EnviosDiarios");
                });

            modelBuilder.Entity("ExcelTopProductoML", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaCreacionUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModeloColor")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ExcelTopProductosML", (string)null);
                });

            modelBuilder.Entity("Gasto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<bool>("EsImportante")
                        .HasColumnType("boolean");

                    b.Property<bool>("EsRecurrente")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FrecuenciaRecurrencia")
                        .HasColumnType("text");

                    b.Property<string>("MetodoPago")
                        .HasColumnType("text");

                    b.Property<decimal>("Monto")
                        .HasColumnType("numeric");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Proveedor")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Gastos");
                });

            modelBuilder.Entity("HistorialImportacionClientes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CantidadClientesNuevos")
                        .HasColumnType("integer");

                    b.Property<int>("CantidadComprasNuevas")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaImportacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NombreArchivo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("HistorialImportacionClientes", (string)null);
                });

            modelBuilder.Entity("InstagramPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BusinessId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Clicks")
                        .HasColumnType("double precision");

                    b.Property<int>("Comments")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Cuenta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Engagement")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("FechaPublicacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Impressions")
                        .HasColumnType("integer");

                    b.Property<long>("Interactions")
                        .HasColumnType("bigint");

                    b.Property<int>("Likes")
                        .HasColumnType("integer");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Reach")
                        .HasColumnType("integer");

                    b.Property<int>("Saved")
                        .HasColumnType("integer");

                    b.Property<int>("Shares")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VideoViews")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PostId")
                        .IsUnique();

                    b.ToTable("InstagramPosts");
                });

            modelBuilder.Entity("InstagramReel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BusinessId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Comentarios")
                        .HasColumnType("integer");

                    b.Property<int>("Compartidos")
                        .HasColumnType("integer");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Cuenta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Engagement")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("FechaPublicacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Guardados")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Interacciones")
                        .HasColumnType("integer");

                    b.Property<int>("Likes")
                        .HasColumnType("integer");

                    b.Property<int>("Reach")
                        .HasColumnType("integer");

                    b.Property<string>("ReelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VideoViews")
                        .HasColumnType("integer");

                    b.Property<int>("Views")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReelId")
                        .IsUnique();

                    b.ToTable("InstagramReels");
                });

            modelBuilder.Entity("InstagramSeguidores", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Cuenta")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Cuenta", "Date")
                        .IsUnique();

                    b.ToTable("InstagramSeguidores");
                });

            modelBuilder.Entity("InstagramStory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BusinessId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Cuenta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Exits")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaPublicacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Impressions")
                        .HasColumnType("integer");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("text");

                    b.Property<string>("Permalink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Reach")
                        .HasColumnType("integer");

                    b.Property<int>("Replies")
                        .HasColumnType("integer");

                    b.Property<int>("TapsBack")
                        .HasColumnType("integer");

                    b.Property<int>("TapsForward")
                        .HasColumnType("integer");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PostId")
                        .IsUnique();

                    b.ToTable("InstagramStories");
                });

            modelBuilder.Entity("MercadoLibreManualReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<decimal>("Revenue")
                        .HasColumnType("numeric");

                    b.Property<int>("UnitsSold")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("MercadoLibreManualReports");
                });

            modelBuilder.Entity("PlantillaWhatsApp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("General");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Activa");

                    b.HasIndex("Categoria");

                    b.HasIndex("Activa", "Categoria");

                    b.ToTable("PlantillasWhatsApp", (string)null);
                });

            modelBuilder.Entity("ReportePublicidadML", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AcosObjetivo")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("AcosReal")
                        .HasColumnType("numeric");

                    b.Property<int?>("Alcance")
                        .HasColumnType("integer");

                    b.Property<int?>("Clics")
                        .HasColumnType("integer");

                    b.Property<decimal?>("CostoPorVisita")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Cpc")
                        .HasColumnType("numeric");

                    b.Property<int?>("Impresiones")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Ingresos")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Inversion")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<string>("NombreCampania")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<decimal?>("Presupuesto")
                        .HasColumnType("numeric");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Ventas")
                        .HasColumnType("integer");

                    b.Property<int?>("VentasPads")
                        .HasColumnType("integer");

                    b.Property<int?>("VisitasConDisplay")
                        .HasColumnType("integer");

                    b.Property<int?>("VisitasSinDisplay")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ReportesPublicidadML", (string)null);
                });

            modelBuilder.Entity("SucursalVenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AbreSabadoTarde")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique()
                        .HasDatabaseName("IX_SucursalesVentas_Nombre");

                    b.ToTable("SucursalesVentas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AbreSabadoTarde = false,
                            FechaCreacion = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Nombre = "25 de mayo"
                        },
                        new
                        {
                            Id = 2,
                            AbreSabadoTarde = false,
                            FechaCreacion = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Nombre = "DEAN FUNES"
                        });
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("VendedorVenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_VendedoresVentas_Activo");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_VendedoresVentas_Email")
                        .HasFilter("\"Email\" IS NOT NULL");

                    b.HasIndex("Nombre")
                        .HasDatabaseName("IX_VendedoresVentas_Nombre");

                    b.ToTable("VendedoresVentas", (string)null);
                });

            modelBuilder.Entity("VentaVendedora", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer");

                    b.Property<bool>("EsProductoDescuento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Producto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("SucursalId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Turno")
                        .HasColumnType("integer");

                    b.Property<int>("VendedorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EsProductoDescuento")
                        .HasDatabaseName("IX_VentasVendedoras_EsProductoDescuento");

                    b.HasIndex("Fecha")
                        .HasDatabaseName("IX_VentasVendedoras_Fecha");

                    b.HasIndex("Fecha", "Turno")
                        .HasDatabaseName("IX_VentasVendedoras_Fecha_Turno");

                    b.HasIndex("SucursalId", "Fecha")
                        .HasDatabaseName("IX_VentasVendedoras_Sucursal_Fecha");

                    b.HasIndex("VendedorId", "Fecha")
                        .HasDatabaseName("IX_VentasVendedoras_Vendedor_Fecha");

                    b.HasIndex("SucursalId", "VendedorId", "Fecha")
                        .HasDatabaseName("IX_VentasVendedoras_Sucursal_Vendedor_Fecha");

                    b.ToTable("VentasVendedoras", (string)null);
                });

            modelBuilder.Entity("VentaWooCommerce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Año")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("Mes")
                        .HasColumnType("integer");

                    b.Property<decimal>("MontoFacturado")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Tienda")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TopCategorias")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("[]");

                    b.Property<string>("TopProductos")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("[]");

                    b.Property<int>("UnidadesVendidas")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FechaCreacion")
                        .HasDatabaseName("IX_VentasWooCommerce_FechaCreacion");

                    b.HasIndex("Año", "Mes")
                        .HasDatabaseName("IX_VentasWooCommerce_Periodo");

                    b.HasIndex("Tienda", "Mes", "Año")
                        .IsUnique()
                        .HasDatabaseName("IX_VentasWooCommerce_Tienda_Periodo");

                    b.ToTable("VentasWooCommerce", (string)null);
                });

            modelBuilder.Entity("AdCampaign", b =>
                {
                    b.HasOne("AdReport", "Reporte")
                        .WithMany("Campañas")
                        .HasForeignKey("AdReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reporte");
                });

            modelBuilder.Entity("AnuncioDisplayML", b =>
                {
                    b.HasOne("ReportePublicidadML", "Reporte")
                        .WithMany("Anuncios")
                        .HasForeignKey("ReportePublicidadMLId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reporte");
                });

            modelBuilder.Entity("Compra", b =>
                {
                    b.HasOne("Cliente", "Cliente")
                        .WithMany("Compras")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("CompraDetalle", b =>
                {
                    b.HasOne("Compra", "Compra")
                        .WithMany("Detalles")
                        .HasForeignKey("CompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compra");
                });

            modelBuilder.Entity("VentaVendedora", b =>
                {
                    b.HasOne("SucursalVenta", "Sucursal")
                        .WithMany("Ventas")
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VendedorVenta", "Vendedor")
                        .WithMany("Ventas")
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sucursal");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("AdReport", b =>
                {
                    b.Navigation("Campañas");
                });

            modelBuilder.Entity("Cliente", b =>
                {
                    b.Navigation("Compras");
                });

            modelBuilder.Entity("Compra", b =>
                {
                    b.Navigation("Detalles");
                });

            modelBuilder.Entity("ReportePublicidadML", b =>
                {
                    b.Navigation("Anuncios");
                });

            modelBuilder.Entity("SucursalVenta", b =>
                {
                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("VendedorVenta", b =>
                {
                    b.Navigation("Ventas");
                });
#pragma warning restore 612, 618
        }
    }
}
